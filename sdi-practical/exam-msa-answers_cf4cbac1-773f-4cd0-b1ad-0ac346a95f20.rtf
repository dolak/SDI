{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16120\viewh18460\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 DBS Practice Final Exam (Practical)\
\
EXAM\
\
*** Name: [   ]\
\
\
PART I: Import\
\
With the exam you have been given files named exam-msa.sql, exam-msa.csv, and exam-msa.pdf.\
\
1. Use Sequel Pro to create a new database named "dbsXXXXPF".\
\
2. Switch to your new "dbsXXXXPF" database.\
\
3. Import the exam-msa.sql file.  This will create a table named "msa_raw", as well as a number of other tables that start with "msa_".\
\
4. Import the exam-msa.csv file into your new "msa_raw" table.\
\
*** Record count of "msa_raw" table: [ 300000-310000 ]\
\

\b select count(*) from msa_raw;
\b0 \
\
This data set comes from the USA's Bureau of Labor Statistics' Occupational Employment Statistics package.  It breaks down jobs and pay rates for each year by Metropolitan Statistical Areas, grouping cities in a single region together into an MSA to allow for easier reporting.  You're going to do some analysis of the data, but first you need to normalize it properly -- which requires proper keying and indexing.\
\
PART II: Keys and Indexes\
\
1. Some of the lookup tables use surrogate keys with typical "id" columns: "msa_jobs" and "msa_areas".  Use ALTER TABLE statements to add primary keys to each of these tables and paste the SQL below.  If you don't remember the ALTER TABLE syntax from your homework, look it up in the mySQL Help in Sequel Pro.\
\
SQL: (2 statements)\
\

\b alter table msa_jobs add primary key (jobID);\
\
alter table msa_areas add primary key (areaID);
\b0 \
\
\
2. One of the lookup tables uses a simple, natural key: "msa_states".  Use an ALTER TABLE statement to add a primary keys to this table.\
\
SQL:\
\

\b alter table msa_states add primary key (state);\

\b0 \
\
3. The facts table, "msa_facts", uses a composite key.  Refer to the entity diagram and use an ALTER TABLE statements to add a primary key to this table.\
\
SQL:\
\

\b alter table msa_facts add primary key (jobId,areaId,calendarYear);
\b0 \
\
\
4. Refer to the entity diagram and use ALTER TABLE statements to add all of the required foreign key constraints.  You should end up with 3 foreign keys.  Remember to set all foreign keys to cascade.\
\
SQL:  (3 statements)\
\

\b alter table msa_facts ADD FOREIGN KEY (jobID) REFERENCES msa_jobs (jobID) on delete cascade on update cascade;\
\
alter table msa_facts ADD FOREIGN KEY (areaID) REFERENCES msa_areas (areaID) on delete cascade on update cascade;\
\
alter table msa_areas ADD FOREIGN KEY (areaState) REFERENCES msa_states (state) on delete cascade on update cascade;
\b0 \
\
\
5. You should also create a few unique indexes to make sure no data is duplicated.  Write ALTER TABLE or CREATE UNIQUE INDEX statements to add a unique index to each Name column in the "msa_jobs" and "msa_areas" tables.\
\
SQL:  (2 statements)\
\

\b alter table msa_jobs add UNIQUE (jobName);\
\
alter table msa_areas add UNIQUE (areaName);
\b0 \
\
\
PART III: Normalization\
\
Your goal for this section is to split the data from the "msa_raw" table into the supporting tables.\
\
Keep an eye out for errors as you import -- the unique indexes and primary keys you created will prevent you from inserting duplicate records, so your SELECT queries will need to ensure that each record is unique.\
\
1. Use an INSERT-SELECT statement to populate the "msa_states" table.  Make sure you don't insert any NULL or blank records!\
\
*** Count of records in "msa_states": [ 40-60 ]\
SQL:\
\

\b insert into msa_states (state)(\
select distinct state \
from	  msa_raw\
where 	state != ''\
and 	state is not null);
\b0 \
\
\
2. Do the same for "msa_areas".  Be sure to include the State.\
\
*** Count of records in "msa_areas": [ 300-500 ] 400\
SQL:\
\

\b insert into msa_areas (areaId,areaName, areaState)(\
select 	distinct areaId, areaName, state \
from	msa_raw\
where state != ''\
and 	state is not null\
and 	areaName != ''\
and 	areaName is not null);
\b0 \
\
\
3. Do the same for "msa_jobs".  Be sure to include the Level.\
\
*** Count of records in "msa_jobs": [ 800-850 ]\
SQL:\
\

\b insert into msa_jobs (jobId,jobName, jobLevel)(\
select distinct jobId, jobName,jobLevel\
from	msa_raw\
where	jobName != ''\
and 	jobName is not null);
\b0 \
\
\
4. Do the same for "msa_facts".\
\
*** Count of records in "msa_facts": [ 300000-310000 ]\
SQL:\
\

\b insert into msa_facts (jobId,areaId,calendarYear,employed,employedError,jobsPerk,hourlyMean,annualMean,meanError,hourlyMedian,annualOnly, hourlyOnly)(\
select 	distinct jobId,areaId,calendarYear,employed,employedError,jobsPerk,hourlyMean,annualMean,meanError,hourlyMedian,annualOnly, hourlyOnly\
from	msa_raw\
where   jobName != ''\
and 	jobName is not null\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8438\tx8640\pardirnatural
\cf0 and	state != ''\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 and 	state is not null\
and 	areaName != ''\
and 	areaName is not null);
\b0 \
\
\
Now that your tables are normalized, keyed, and indexed, you should no longer use the "msa_raw" table for any of your queries.  To prevent you from forgetting, you may want to rename the table to "DONOTUSE".  You will not get any points for queries that use this table.\
\
\
PART IV: Views\
\
This data set includes records that are summaries of other records.  For example, jobs ending in "-0000" summarize the other records that have the same prefix: "15-0000" summarizes all of the "15-****" records.  The "00-0000" records summarize all of the other records for that year.\
\
If you ran queries without taking these summary records into account, you might end up with bogus results.\
\
1. Create three views of your "msa_jobs" table named "msa_jobs_total", "msa_jobs_major", and "msa_jobs_detail".  Each view should include only the ID and Name columns, and only the records with the appropriate Level.  (The Detail level should include only jobs without a Level -- the detail records.)\
\
*** Count of records in view "msa_jobs_total": [ 0-10 ]\
*** Count of records in view "msa_jobs_major": [ 20-30 ]\
*** Count of records in view "msa_jobs_detail": [ 750-800 ]\
SQL:  (3 statements)\
\

\b create view msa_jobs_total as\
select jobId, jobName\
from 	msa_jobs\
where jobLevel = 'Total';\
\
create view msa_jobs_major as\
select jobId, jobName\
from 	msa_jobs\
where jobLevel = 'major';\
\
create view msa_jobs_detail as\
select jobId, jobName\
from 	msa_jobs\
where jobLevel is null;
\b0 \
\
\
\
2. Using the "msa_jobs_detail" view as a base, inner join to the "msa_facts" table to make a new view named "msa_facts_detail" which contains only the Detail-level facts.  Fetch the unique columns from both tables (don't get two job IDs).\
\
*** Count of records in view "msa_facts_detail": [ 280000-290000 ]\
SQL:\
\

\b create view msa_facts_detail as\
select msa_jobs_detail.jobId, jobName, areaId, calendarYear, employed, employedError, jobsPerK, hourlyMean, annualMean, meanError, hourlyMedian, annualMedian,annualOnly, hourlyOnly\
from 	msa_jobs_detail\
join msa_facts on msa_facts.jobId = msa_jobs_detail.jobId;
\b0 \
\
\
3. Build on your "msa_facts_detail" view to create a new view named "msa_facts_detail_area" view, which includes the Area Name and State.\
\
*** Count of records in view "msa_facts_detail_area": [ 280000-290000 ]\
SQL:\
\

\b create view msa_facts_detail_area as\
select jobId, jobName, areaId, calendarYear, employed, employedError, jobsPerK, hourlyMean, annualMean, meanError, hourlyMedian, annualMedian,annualOnly, hourlyOnly, areaName, areaState\
from msa_facts_detail\
join msa_area on msa_area.areaId = msa_facts_detail.areaId;
\b0 \
\
\
\
\
PART V: Aggregates, Take 1\
\
Use your "msa_facts_detail_area" and aggregate functions to answer the following questions.  You will need to provide both the numeric answer and the SQL to find your answer.\
\
1. How many employed people were included in the statistics for each year?\
\
Year  Employed\
====  =============\
2008  [ 110M-120M ] 110592390\
2009  [ 100M-110M ] 107216400\
\
SQL:\
\

\b select	calendarYear,\
	sum(employed) as employed\
from msa_facts_detail_area\
group by calendarYear;
\b0 \
\
\
2. Refactor your query to replace the number of employed with two new columns: the average Annual Mean salary (how much does the average American make per year?), and the total wages earned per year by all Americans (use the same Annual Mean, multiplied by the number of employed).  Divide the total wages by 1 trillion to get an easier number, and report the answer to 4 decimal places.\
\
Year  AvgAnnual    TotalWages\
====  ===========  =============\
2008  [ 40K-50K ]  [ 4.7T-4.8T ]\
2009  [ 40K-50K ]  [ 4.7T-4.8T ]\
\
SQL:\
\

\b select	calendarYear,\
	avg(annualMean) as AvgAnnual,\
	sum(employed * annualMean)/1000000000000 as TotalWages\
\
from msa_facts_detail_area\
group by calendarYear;
\b0 \
\
\
3. Start a new query, still using your "msa_facts_detail_area" view.  This one will look for computer jobs (which have an ID that starts with '15') in Florida in 2009.  \
\
For each job, get the lowest, highest, and average annual mean salary.  \
\
Filter out any jobs that average less than $60K/year.  \
\
Order your results from highest to lowest average salary.\
\
*** If the top result is rank 1, what's the rank 1 job? [ ... ]\
*** What rank do Database Administrators get? [ 1-15 ] \
*** What's the minimum annual salary for a DBA job? [ 50000-60000 ] \
\
SQL:\
\

\b select jobId,\
	min(annualMean) as minAnnual,\
	max(annualMean) as maxAnnual,\
	avg(annualMean) as avgAnnual\
\
from msa_facts_detail_area\
where jobId like '15-%'\
and 	areaState = 'FL'\
and 	calendarYear = '2009'\
group by jobId\
having avgAnnual >= 60000 \
order by avgAnnual desc;
\b0 \
\
\
\
PART VI: Subqueries\
\
1. Your "msa_facts_detail" view uses inner joins.  \
Rewrite the query so that instead of joining to your "msa_jobs_detail" view, it joins your "msa_facts" table to an inline view subquery of your "msa_jobs" table that performs the same filtering.  It should return the same results as the detail view.\
\
*** Count of records: [ 280000-290000 ]\
SQL:\
\
\
select msa_jobs_detail.jobId, jobName, areaId, calendarYear, employed, employedError, jobsPerK, hourlyMean, annualMean, meanError, hourlyMedian, annualMedian,annualOnly, hourlyOnly\
from 	msa_jobs_detail\
join msa_facts on msa_facts.jobId = msa_jobs_detail.jobId;\
\
\

\b select msa_facts.jobID,msa_facts.areaID,calendarYear,employed,employedError,jobsPerK,hourlyMean,annualMean,meanError,hourlyMedian,annualMedian,annualOnly,hourlyOnly\
from 	msa_facts\
join (\
	select jobId, jobName\
	from 	msa_jobs\
	where jobLevel = ''\
	or 	jobLevel is null\
) as msa_jobs_detail \
on msa_facts.jobId = msa_jobs_detail.jobId;
\b0 \
\
\
\
2. Refactor your last query to include a join to another subquery that returns only areas in Florida.\
\
*** Count of records [ 16000-17000 ]\
SQL:\
\
\

\b select msa_facts.jobID,msa_facts.areaID,calendarYear,employed,employedError,jobsPerK,hourlyMean,annualMean,meanError,hourlyMedian,annualMedian,annualOnly,hourlyOnly\
from 	msa_facts\
join (\
	select jobId, jobName\
	from 	msa_jobs\
	where jobLevel = ''\
	or 	jobLevel is null\
) as msa_jobs_detail \
on msa_facts.jobId = msa_jobs_detail.jobId\
join (select areaId from msa_areas where areaState = 'FL') \
as flarea on flarea.areaId = msa_facts.areaId;
\b0 \
\
\
\
3. You're going to refactor your Florida jobs query from above to use a scalar subquery.\
  a. Start with your "msa_jobs" table and filter so that all of the job IDs start with '15'.\
  b. Use a scalar subquery to find the average annual mean salary for each job -- this will involve joining your "msa_facts" table to your "msa_areas" table and filtering for Florida in 2009.\
  c. Don't forget to join your scalar subquery back to your main table!\
  d. Perform the same filtering to eliminate average salaries below $60K.\
  e. Order by descending average salary.\
\
*** Average annual salary for DBAs: [ 65000-70000 ]\
SQL:\
\

\b select jobId, jobName,\
	(\
		select avg(annualMean) \
		from msa_facts\
		join msa_areas on msa_facts.areaId = msa_areas.areaId\
		where	areaState = 'FL'\
		and   calendarYear = 2009\
		and 		msa_facts.jobId = msa_jobs.jobId\
	) as avgMean\
from msa_jobs\
where jobId like '15%'\
\
having avgMean >= 60000\
order by avgMean desc;\

\b0 \
FINISHING YOUR EXAM\
\
1. Go back through this file and search for all "***" and "SQL:" markers.  Make sure you have answers for all of them.\
\
2. Commit your files (this text file and your graph PNG image) with the commit message "Finished exam".\
\
3. Raise your hand and inform the Instructor that you are finished.  DO NOT PUSH UNTIL TOLD TO DO SO.\
\
}